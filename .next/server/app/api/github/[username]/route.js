"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/github/[username]/route";
exports.ids = ["app/api/github/[username]/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&page=%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub%2F%5Busername%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&page=%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub%2F%5Busername%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_erber_Desktop_github_streak_src_app_api_github_username_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/github/[username]/route.ts */ \"(rsc)/./src/app/api/github/[username]/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/github/[username]/route\",\n        pathname: \"/api/github/[username]\",\n        filename: \"route\",\n        bundlePath: \"app/api/github/[username]/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\erber\\\\Desktop\\\\github streak\\\\src\\\\app\\\\api\\\\github\\\\[username]\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_erber_Desktop_github_streak_src_app_api_github_username_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/github/[username]/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnaXRodWIlMkYlNUJ1c2VybmFtZSU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZ2l0aHViJTJGJTVCdXNlcm5hbWUlNUQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZnaXRodWIlMkYlNUJ1c2VybmFtZSU1RCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNlcmJlciU1Q0Rlc2t0b3AlNUNnaXRodWIlMjBzdHJlYWslNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q2VyYmVyJTVDRGVza3RvcCU1Q2dpdGh1YiUyMHN0cmVhayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDcUM7QUFDbEg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWItc3RyZWFrLXdpZGdldC8/ZmQyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxlcmJlclxcXFxEZXNrdG9wXFxcXGdpdGh1YiBzdHJlYWtcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcZ2l0aHViXFxcXFt1c2VybmFtZV1cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dpdGh1Yi9bdXNlcm5hbWVdL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ2l0aHViL1t1c2VybmFtZV1cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2dpdGh1Yi9bdXNlcm5hbWVdL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcZXJiZXJcXFxcRGVza3RvcFxcXFxnaXRodWIgc3RyZWFrXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGdpdGh1YlxcXFxbdXNlcm5hbWVdXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9naXRodWIvW3VzZXJuYW1lXS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&page=%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub%2F%5Busername%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/github/[username]/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/github/[username]/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nasync function fetchGitHubUser(username) {\n    const response = await fetch(`https://api.github.com/users/${username}`);\n    if (!response.ok) {\n        throw new Error(`Failed to fetch user: ${response.status}`);\n    }\n    return response.json();\n}\nasync function fetchContributions(username) {\n    try {\n        // First get user's account creation year\n        const userResponse = await fetch(`https://api.github.com/users/${username}`);\n        if (!userResponse.ok) {\n            throw new Error(`Failed to fetch user: ${userResponse.status}`);\n        }\n        const userData = await userResponse.json();\n        const accountCreationYear = new Date(userData.created_at).getFullYear();\n        // Get ALL years of contributions data from account creation to current year\n        const currentYear = new Date().getFullYear();\n        const allContributions = [];\n        let totalContributions = 0;\n        // Get data for each year from account creation to current year\n        for(let year = accountCreationYear; year <= currentYear; year++){\n            const fromDate = new Date(year, 0, 1) // January 1st of the year\n            ;\n            const toDate = new Date(year, 11, 31, 23, 59, 59) // December 31st of the year\n            ;\n            const query = `\n        query($username: String!, $from: DateTime!, $to: DateTime!) {\n          user(login: $username) {\n            contributionsCollection(from: $from, to: $to) {\n              contributionCalendar {\n                totalContributions\n                weeks {\n                  contributionDays {\n                    date\n                    contributionCount\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"User-Agent\": \"GitHub-Streak-Widget/1.0\"\n            };\n            if (process.env.GITHUB_TOKEN) {\n                headers[\"Authorization\"] = `Bearer ${process.env.GITHUB_TOKEN}`;\n            }\n            const response = await fetch(\"https://api.github.com/graphql\", {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify({\n                    query,\n                    variables: {\n                        username,\n                        from: fromDate.toISOString(),\n                        to: toDate.toISOString()\n                    }\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.data?.user?.contributionsCollection?.contributionCalendar) {\n                    const calendar = data.data.user.contributionsCollection.contributionCalendar;\n                    totalContributions += calendar.totalContributions;\n                    // Add all contribution days from this year\n                    calendar.weeks.forEach((week)=>{\n                        week.contributionDays.forEach((day)=>{\n                            allContributions.push({\n                                date: day.date,\n                                count: day.contributionCount\n                            });\n                        });\n                    });\n                }\n            } else {}\n            // Small delay to avoid rate limiting\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n        // Sort contributions by date\n        allContributions.sort((a, b)=>a.date.localeCompare(b.date));\n        return {\n            user: userData,\n            contributions: {\n                totalContributions,\n                weeks: [\n                    {\n                        contributionDays: allContributions\n                    }\n                ]\n            }\n        };\n    } catch (error) {\n        const fallbackContributions = await fetchContributionsFromHtml(username);\n        const fallbackUser = await fetchGitHubUser(username);\n        return {\n            user: fallbackUser,\n            contributions: fallbackContributions\n        };\n    }\n}\nasync function fetchContributionsFromHtml(username) {\n    try {\n        // Try Events API first (most accurate for recent activity)\n        const eventsData = await fetchFromEventsAPI(username);\n        if (eventsData.totalContributions > 0) {\n            return eventsData;\n        }\n    } catch (error) {}\n    try {\n        // Try GraphQL API\n        const graphqlData = await fetchFromGraphQL(username);\n        if (graphqlData.totalContributions > 0) {\n            return graphqlData;\n        }\n    } catch (error) {}\n    // Final fallback to HTML parsing\n    return await fetchFromContributionsPage(username);\n}\nasync function fetchFromEventsAPI(username) {\n    const eventsHeaders = {\n        \"User-Agent\": \"GitHub-Streak-Widget/1.0\"\n    };\n    if (process.env.GITHUB_TOKEN) {\n        eventsHeaders[\"Authorization\"] = `Bearer ${process.env.GITHUB_TOKEN}`;\n    }\n    // Get multiple pages of events to get more data\n    const allEvents = [];\n    const maxPages = 5 // Get last 500 events\n    ;\n    for(let page = 1; page <= maxPages; page++){\n        const eventsResponse = await fetch(`https://api.github.com/users/${username}/events?per_page=100&page=${page}`, {\n            headers: eventsHeaders\n        });\n        if (!eventsResponse.ok) {\n            break;\n        }\n        const events = await eventsResponse.json();\n        if (events.length === 0) {\n            break;\n        }\n        allEvents.push(...events);\n    }\n    // Group events by date and count contributions\n    const contributionsMap = new Map();\n    allEvents.forEach((event)=>{\n        if (event.type === \"PushEvent\" || event.type === \"PullRequestEvent\" || event.type === \"IssuesEvent\") {\n            const date = event.created_at.split(\"T\")[0];\n            contributionsMap.set(date, (contributionsMap.get(date) || 0) + 1);\n        }\n    });\n    const contributions = Array.from(contributionsMap.entries()).map(([date, count])=>({\n            date,\n            count\n        })).sort((a, b)=>a.date.localeCompare(b.date));\n    return {\n        totalContributions: contributions.reduce((sum, day)=>sum + day.count, 0),\n        weeks: [\n            {\n                contributionDays: contributions\n            }\n        ]\n    };\n}\nasync function fetchFromGraphQL(username) {\n    const query = `\n      query($username: String!) {\n        user(login: $username) {\n          contributionsCollection {\n            contributionCalendar {\n              totalContributions\n              weeks {\n                contributionDays {\n                  date\n                  contributionCount\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"GitHub-Streak-Widget/1.0\"\n    };\n    if (process.env.GITHUB_TOKEN) {\n        headers[\"Authorization\"] = `Bearer ${process.env.GITHUB_TOKEN}`;\n    }\n    const response = await fetch(\"https://api.github.com/graphql\", {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n            query,\n            variables: {\n                username\n            }\n        })\n    });\n    if (response.ok) {\n        const data = await response.json();\n        if (data.data?.user?.contributionsCollection?.contributionCalendar) {\n            const calendar = data.data.user.contributionsCollection.contributionCalendar;\n            return {\n                totalContributions: calendar.totalContributions,\n                weeks: calendar.weeks.map((week)=>({\n                        contributionDays: week.contributionDays.map((day)=>({\n                                date: day.date,\n                                count: day.contributionCount\n                            }))\n                    }))\n            };\n        }\n    }\n    throw new Error(\"GraphQL query failed\");\n}\nasync function fetchFromContributionsPage(username) {\n    const response = await fetch(`https://github.com/users/${username}/contributions`, {\n        headers: {\n            \"User-Agent\": \"GitHub-Streak-Widget/1.0\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to fetch contributions: ${response.status}`);\n    }\n    const data = await response.text();\n    // Parse the SVG response to extract contribution data\n    const contributionRegex = /data-date=\"([^\"]+)\" data-count=\"([^\"]+)\"/g;\n    const contributions = [];\n    let match;\n    while((match = contributionRegex.exec(data)) !== null){\n        contributions.push({\n            date: match[1],\n            count: parseInt(match[2], 10)\n        });\n    }\n    return {\n        totalContributions: contributions.reduce((sum, day)=>sum + day.count, 0),\n        weeks: [\n            {\n                contributionDays: contributions\n            }\n        ]\n    };\n}\nfunction calculateCurrentStreak(contributions) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const sortedContributions = contributions.filter((day)=>day.count > 0).sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n    if (sortedContributions.length === 0) return 0;\n    // Get the most recent contribution date\n    const mostRecentContribution = sortedContributions[0];\n    const mostRecentDate = new Date(mostRecentContribution.date);\n    mostRecentDate.setHours(0, 0, 0, 0);\n    // Calculate days difference between today and most recent contribution\n    const daysDiff = Math.floor((today.getTime() - mostRecentDate.getTime()) / (1000 * 60 * 60 * 24));\n    if (daysDiff === 0) {\n        // Most recent contribution is today - calculate normal streak\n        let streak = 1;\n        let checkDate = new Date(today);\n        checkDate.setDate(checkDate.getDate() - 1);\n        for(let i = 1; i < sortedContributions.length; i++){\n            const contributionDate = new Date(sortedContributions[i].date);\n            contributionDate.setHours(0, 0, 0, 0);\n            if (contributionDate.getTime() === checkDate.getTime()) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n        }\n        return streak;\n    } else if (daysDiff === 1) {\n        // Most recent contribution is yesterday - streak continues today\n        // Calculate the full streak including yesterday\n        let streak = 1 // Start with yesterday\n        ;\n        let checkDate = new Date(mostRecentDate);\n        checkDate.setDate(checkDate.getDate() - 1);\n        for(let i = 1; i < sortedContributions.length; i++){\n            const contributionDate = new Date(sortedContributions[i].date);\n            contributionDate.setHours(0, 0, 0, 0);\n            if (contributionDate.getTime() === checkDate.getTime()) {\n                streak++;\n                checkDate.setDate(checkDate.getDate() - 1);\n            } else {\n                break;\n            }\n        }\n        return streak;\n    } else {\n        // Gap of 2+ days - streak is broken\n        return 0;\n    }\n}\nfunction calculateLongestStreak(contributions) {\n    const sortedContributions = contributions.filter((day)=>day.count > 0).sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n    if (sortedContributions.length === 0) return 0;\n    let longestStreak = 0;\n    let currentStreak = 1;\n    for(let i = 1; i < sortedContributions.length; i++){\n        const prevDate = new Date(sortedContributions[i - 1].date);\n        const currentDate = new Date(sortedContributions[i].date);\n        const dayDiff = Math.floor((currentDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));\n        if (dayDiff === 1) {\n            currentStreak++;\n        } else {\n            longestStreak = Math.max(longestStreak, currentStreak);\n            currentStreak = 1;\n        }\n    }\n    return Math.max(longestStreak, currentStreak);\n}\nasync function GET(request, { params }) {\n    try {\n        const { username } = params;\n        if (!username) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Username is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Fetch both user and contributions data in one call\n        const dataWithUser = await fetchContributions(username);\n        const { user, contributions } = dataWithUser;\n        // Calculate streaks from ALL contribution days\n        const allContributionDays = contributions.weeks[0].contributionDays;\n        const currentStreak = calculateCurrentStreak(allContributionDays);\n        const longestStreak = calculateLongestStreak(allContributionDays);\n        const totalDays = allContributionDays.filter((day)=>day.count > 0).length;\n        // Add info about private repos\n        const hasToken = !!process.env.GITHUB_TOKEN;\n        const stats = {\n            user,\n            contributions,\n            streak: {\n                current: currentStreak,\n                longest: longestStreak,\n                total: totalDays\n            }\n        };\n        // Add metadata about data source\n        const enhancedStats = {\n            ...stats,\n            _metadata: {\n                includesPrivateRepos: hasToken,\n                dataSource: hasToken ? \"Authenticated API\" : \"Public API only\",\n                note: hasToken ? \"Includes private repositories and organization contributions\" : \"Only public contributions shown. Add GITHUB_TOKEN for private repos.\"\n            }\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(enhancedStats);\n    } catch (error) {\n        console.error(\"Error fetching GitHub data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch GitHub data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/github/[username]/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&page=%2Fapi%2Fgithub%2F%5Busername%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub%2F%5Busername%5D%2Froute.ts&appDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cerber%5CDesktop%5Cgithub%20streak&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();